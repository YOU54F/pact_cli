name: Test and Release

on:
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - main
      - non-slim
  workflow_dispatch:
    inputs:
      target:
        description: 'Target platform'
        required: true
        default: 'x86_64-apple-darwin'
      slim:
        description: 'Enable slim mode'
        required: false
        default: 'false'
      use-cross:
        description: 'Enable cross-compilation'
        required: false
        default: 'false'
      os:
        description: 'Operating system'
        required: true
        default: 'macos-14'


jobs:
  build-single:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    # env:
    #   SLIM: ${{ github.event.inputs.slim }}
    name: 'üõ†Ô∏è Build binaries'
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        job:
          - target: ${{ github.event.inputs.target }}
            os: ${{ github.event.inputs.os }}
            use-cross: ${{ github.event.inputs.use-cross }}
            slim: ${{ github.event.inputs.slim }}
    runs-on: ${{ github.event.inputs.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: you54f/hello_cli/.github/workflows/reusable-build.yml@main
      # - uses: ./.github/workflows/reusable-build.yml
        with:
          target: ${{ github.event.inputs.target }}
          os: ${{ github.event.inputs.os }}
          use-cross: ${{ github.event.inputs.use-cross }}
          slim: ${{ github.event.inputs.slim }}
      # - name: Install stable Rust Toolchain Components
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.job.target }}
      #     toolchain: stable
      #   if: ${{ matrix.job.target != 'aarch64-unknown-freebsd' && matrix.job.target != 'mips64-unknown-linux-gnuabi64' && matrix.job.target != 'mips64el-unknown-linux-gnuabi64' && matrix.job.target != 'mips64-unknown-linux-muslabi64' && matrix.job.target != 'mips64el-unknown-linux-muslabi64' && matrix.job.target != 's390x-unknown-linux-musl' && matrix.job.target != 'riscv64gc-unknown-linux-musl' }}
      # - name: Install nightly Rust Toolchain Components
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.job.target }}
      #     toolchain: nightly
      #   if: ${{ matrix.job.use-cross != true && env.SLIM == 'true' }}
      # - name: Install Rust Toolchain Components
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: x86_64-unknown-linux-gnu
      #     toolchain: nightly
      #   if: ${{ matrix.job.target == 'aarch64-unknown-freebsd' || matrix.job.target == 's390x-unknown-linux-musl' || matrix.job.target == 'riscv64gc-unknown-linux-musl'}}
      # - name: Rust caching
      #   uses: Swatinem/rust-cache@v2
      # - name: set MACOSX_DEPLOYMENT_TARGET to 10.9 for x86_64-apple-darwin (mavericks)
      #   if: ${{ matrix.job.target == 'x86_64-apple-darwin' }}
      #   run: echo "MACOSX_DEPLOYMENT_TARGET=10.9" >> $GITHUB_ENV
      # - name: set MACOSX_DEPLOYMENT_TARGET to 11.0 for aarch64-apple-darwin (big sur)
      #   if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
      #   run: echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
      # - name: Build with cross
      #   # if: ${{ matrix.job.use-cross == 'true' }}
      #   run: make cargo_build_release TARGET=${{ matrix.job.target }} SLIM=${{ env.SLIM }} USE_CROSS=${{ matrix.job.use-cross }}
      # - name: Create dist
      #   id: dist
      #   shell: bash
      #   run: |
      #     ./prep_dist.sh ${{ matrix.job.target }}
      # - uses: actions/upload-artifact@master
      #   with:
      #     name: ${{ matrix.job.target }}
      #     path: dist/
      # - name: Publish archives and packages
      #   uses: softprops/action-gh-release@master
      #   with:
      #     tag_name: 'v0.0.10'
      #     name: 'Release v0.0.10'
      #     generate_release_notes: false
      #     body: 'Release v0.0.10'
      #     files: dist/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  


  build:
    if: ${{ github.event_name != 'workflow_dispatch' }}
    # env:
    #   SLIM: false
    name: 'üõ†Ô∏è Build binaries'
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        job:
          # - { target: x86_64-apple-darwin, os: macos-14, use-cross: false }
          # - { target: aarch64-apple-darwin, os: macos-14, use-cross: false }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest, use-cross: true }
          # - { target: x86_64-unknown-linux-musl, os: ubuntu-latest, use-cross: true }
          # - { target: aarch64-unknown-linux-musl, os: ubuntu-latest, use-cross: true }
          # - { target: arm-unknown-linux-musleabi, os: ubuntu-latest, use-cross: true }
          # - { target: arm-unknown-linux-musleabihf, os: ubuntu-latest, use-cross: true }
          # - { target: armv7-unknown-linux-musleabi, os: ubuntu-latest, use-cross: true }
          # - { target: armv7-unknown-linux-musleabihf, os: ubuntu-latest, use-cross: true }
          # - { target: armv5te-unknown-linux-musleabi, os: ubuntu-latest, use-cross: true }
          # - { target: aarch64-unknown-linux-gnu, os: ubuntu-latest, use-cross: true }
          # - { target: arm-unknown-linux-gnueabi, os: ubuntu-latest, use-cross: true }
          # - { target: arm-unknown-linux-gnueabihf, os: ubuntu-latest, use-cross: true }
          # - { target: armv7-unknown-linux-gnueabi, os: ubuntu-latest, use-cross: true }
          # - { target: armv7-unknown-linux-gnueabihf, os: ubuntu-latest, use-cross: true }
          # - { target: i686-unknown-linux-gnu, os: ubuntu-latest, use-cross: true }
          # - { target: i686-unknown-linux-musl, os: ubuntu-latest, use-cross: true }
          # - { target: s390x-unknown-linux-gnu, os: ubuntu-latest, use-cross: true }
          # - { target: riscv64gc-unknown-linux-gnu, os: ubuntu-latest, use-cross: true }
          # # awaiting pr's for bsd targets
          # # https://github.com/stanislav-tkach/os_info/issues/370
          # - { target: x86_64-unknown-netbsd, os: ubuntu-latest, use-cross: true }
          # - { target: x86_64-unknown-freebsd, os: ubuntu-latest, use-cross: true }
          # - { target: aarch64-unknown-freebsd, os: ubuntu-latest, use-cross: true }
          # - { target: armv5te-unknown-linux-gnueabi, os: ubuntu-latest, use-cross: true }
          # - { target: arm-linux-androideabi, os: ubuntu-latest, use-cross: true }
          # - { target: armv7-linux-androideabi, os: ubuntu-latest, use-cross: true }
          # - { target: aarch64-linux-android, os: ubuntu-latest, use-cross: true }
          # - { target: i686-linux-android, os: ubuntu-latest, use-cross: true }
          # - { target: x86_64-linux-android, os: ubuntu-latest, use-cross: true }
          # - { target: thumbv7neon-linux-androideabi, os: ubuntu-latest, use-cross: true }
          # - { target: thumbv7neon-unknown-linux-gnueabihf, os: ubuntu-latest, use-cross: true }
          # - { target: x86_64-pc-windows-msvc, os: windows-latest, use-cross: false }
          # - { target: aarch64-pc-windows-msvc, os: windows-latest, use-cross: false }
          # - { target: i686-pc-windows-msvc, os: windows-latest, use-cross: false }
          # - { target: x86_64-pc-windows-gnu, os: windows-latest, use-cross: false }



          # # Fails to build when Ring is included
          # # https://github.com/briansmith/ring/issues/1303
          # - { target: i586-unknown-linux-gnu, os: ubuntu-latest, use-cross: true }
          # - { target: s390x-unknown-linux-musl, os: ubuntu-latest, use-cross: true }
          # - { target: riscv64gc-unknown-linux-musl, os: ubuntu-latest, use-cross: true }
          # - { target: mips64-unknown-linux-gnuabi64, os: ubuntu-latest, use-cross: true }
          # - { target: mips64el-unknown-linux-gnuabi64, os: ubuntu-latest, use-cross: true }
          # - { target: mips64-unknown-linux-muslabi64, os: ubuntu-latest, use-cross: true }
          # - { target: mips64el-unknown-linux-muslabi64, os: ubuntu-latest, use-cross: true }
    runs-on: ${{ matrix.job.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      # - uses: ./.github/workflows/reusable-build.yml
      - uses: you54f/hello_cli/.github/workflows/reusable-build.yml@main
        with:
          target: ${{ matrix.job.target }}
          os: ${{ matrix.job.os }}
          use-cross: ${{ matrix.job.use-cross }}
          slim: false
      # - name: Install stable Rust Toolchain Components
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.job.target }}
      #     toolchain: stable
      #   if: ${{ matrix.job.target != 'aarch64-unknown-freebsd' && matrix.job.target != 'mips64-unknown-linux-gnuabi64' && matrix.job.target != 'mips64el-unknown-linux-gnuabi64' && matrix.job.target != 'mips64-unknown-linux-muslabi64' && matrix.job.target != 'mips64el-unknown-linux-muslabi64' && matrix.job.target != 's390x-unknown-linux-musl' && matrix.job.target != 'riscv64gc-unknown-linux-musl' }}
      # - name: Install nightly Rust Toolchain Components
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.job.target }}
      #     toolchain: nightly
      #   if: ${{ matrix.job.use-cross != true && env.SLIM == 'true' }}
      # - name: Install Rust Toolchain Components
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: x86_64-unknown-linux-gnu
      #     toolchain: nightly
      #   if: ${{ matrix.job.target == 'aarch64-unknown-freebsd' || matrix.job.target == 's390x-unknown-linux-musl' || matrix.job.target == 'riscv64gc-unknown-linux-musl'}}
      # - name: Rust caching
      #   uses: Swatinem/rust-cache@v2
      # - name: set MACOSX_DEPLOYMENT_TARGET to 10.9 for x86_64-apple-darwin (mavericks)
      #   if: ${{ matrix.job.target == 'x86_64-apple-darwin' }}
      #   run: echo "MACOSX_DEPLOYMENT_TARGET=10.9" >> $GITHUB_ENV
      # - name: set MACOSX_DEPLOYMENT_TARGET to 11.0 for aarch64-apple-darwin (big sur)
      #   if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
      #   run: echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
      # - name: Build with cross
      #   # if: ${{ matrix.job.use-cross == 'true' }}
      #   run: make cargo_build_release TARGET=${{ matrix.job.target }} SLIM=${{ env.SLIM }} USE_CROSS=${{ matrix.job.use-cross }}
      # - name: Create dist
      #   id: dist
      #   shell: bash
      #   run: |
      #     ./prep_dist.sh ${{ matrix.job.target }}
      # - uses: actions/upload-artifact@master
      #   with:
      #     name: ${{ matrix.job.target }}
      #     path: dist/
      # - name: Publish archives and packages
      #   uses: softprops/action-gh-release@master
      #   with:
      #     tag_name: 'v0.0.10'
      #     name: 'Release v0.0.10'
      #     generate_release_notes: false
      #     body: 'Release v0.0.10'
      #     files: dist/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # release:
  #   name: 'üì¶ Github release'
  #   if: |
  #     github.ref == 'refs/heads/main'
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     discussions: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@master
  #     - name: Publish archives and packages
  #       uses: softprops/action-gh-release@master
  #       with:
  #         tag_name: 'v0.0.0'
  #         name: 'Release v0.0.0'
  #         generate_release_notes: false
  #         body: 'Release v0.0.0'
  #         files: |
  #           dist/*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
